// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: gapi/protobuf.proto

package gapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnowFlakeServiceClient is the client API for SnowFlakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowFlakeServiceClient interface {
	Generate(ctx context.Context, in *UidRequest, opts ...grpc.CallOption) (*UidResponse, error)
}

type snowFlakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowFlakeServiceClient(cc grpc.ClientConnInterface) SnowFlakeServiceClient {
	return &snowFlakeServiceClient{cc}
}

func (c *snowFlakeServiceClient) Generate(ctx context.Context, in *UidRequest, opts ...grpc.CallOption) (*UidResponse, error) {
	out := new(UidResponse)
	err := c.cc.Invoke(ctx, "/SnowFlakeService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowFlakeServiceServer is the server API for SnowFlakeService service.
// All implementations must embed UnimplementedSnowFlakeServiceServer
// for forward compatibility
type SnowFlakeServiceServer interface {
	Generate(context.Context, *UidRequest) (*UidResponse, error)
	mustEmbedUnimplementedSnowFlakeServiceServer()
}

// UnimplementedSnowFlakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnowFlakeServiceServer struct {
}

func (UnimplementedSnowFlakeServiceServer) Generate(context.Context, *UidRequest) (*UidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedSnowFlakeServiceServer) mustEmbedUnimplementedSnowFlakeServiceServer() {}

// UnsafeSnowFlakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowFlakeServiceServer will
// result in compilation errors.
type UnsafeSnowFlakeServiceServer interface {
	mustEmbedUnimplementedSnowFlakeServiceServer()
}

func RegisterSnowFlakeServiceServer(s grpc.ServiceRegistrar, srv SnowFlakeServiceServer) {
	s.RegisterService(&SnowFlakeService_ServiceDesc, srv)
}

func _SnowFlakeService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowFlakeServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnowFlakeService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowFlakeServiceServer).Generate(ctx, req.(*UidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnowFlakeService_ServiceDesc is the grpc.ServiceDesc for SnowFlakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowFlakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SnowFlakeService",
	HandlerType: (*SnowFlakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _SnowFlakeService_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gapi/protobuf.proto",
}
